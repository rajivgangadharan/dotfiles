jQuery.namespace=function(){var b=arguments,g=null,e,c,f;for(e=0;e<b.length;e=e+1){f=b[e].split(".");g=window;for(c=0;c<f.length;c=c+1){g[f[c]]=g[f[c]]||{};g=g[f[c]]}}return g};jQuery.namespace("com.polycom.rpws");(function(){var g=null;var e=false;var c=null;var a={checkHostApp:false,connect:false,disconnect:false};var d=1023;var i="duplicate plugin instance";var f=3000;var j=100;var b=0;var h=function(k){this.hostAppName=(k.host)?k.host:"com.polycom.rpws.hostapp";this.wsUrl=(k.wsUrl)?k.wsURL:"ws://localhost:9010/";this.nativeBridge=null;this.webSocket=null;this.communicationType="native"};h.prototype.handleMessageFromPage=function(l){if(!l&&!l.target&&!l.name){return}var k=this;if(l.name==="checkHostApp"){if(a.checkHostApp){return}else{a.checkHostApp=true;b=(a.connect||a.disconnect)?f:0;setTimeout(function(){k.checkHostApp()},j)}}else{if(l.name==="connect"){if(a.connect){return}else{a.connect=true;b=(a.checkHostApp||a.disconnect)?f:0;setTimeout(function(){k.connect()},b)}}else{if(l.name==="disconnect"){if(a.disconnect){return}else{a.disconnect=true;b=(a.checkHostApp||a.connect)?f:0;setTimeout(function(){k.disconnect()},b)}}else{if(l.name==="checkExtension"){this.checkExtension()}else{b=(a.connect)?f:0;setTimeout(function(){k.sendMessage(l)},b)}}}}};h.prototype.checkExtension=function(){logger.debug("[Chrome-Extension-HC]: The extension is present");if(e){g.postMessage({type:"host_messages",data:{target:"ui",type:"event",name:"checkExtension",isExtensionPresent:true}})}return};h.prototype.checkHostApp=function(){a.checkHostApp=true;logger.debug("[Chrome-Extension-HC]: Checking if hostApp is present.");if(this.nativeBridge!=null){logger.debug("[Chrome-Extension-HC]: The hostApp is present as per previous checkHostApp.");if(e){g.postMessage({type:"host_messages",data:{target:"ui",type:"event",name:"checkHostApp",isHostAppPresent:true,pluginVersion:"NA"}})}a.checkHostApp=false;return}chrome.runtime.sendNativeMessage(this.hostAppName,{target:"host",type:"event",name:"ping",params:{}},function(l){logger.debug("[Chrome-Extension-HC]: Received the HostApp Response: ",l);var k=(l&&l.target==="ui")?true:false;var m=(l&&l.pluginVersion)?l.pluginVersion:undefined;setTimeout(function(){if(e){g.postMessage({type:"host_messages",data:{target:"ui",type:"event",name:"checkHostApp",isHostAppPresent:k,pluginVersion:m}})}a.checkHostApp=false},j)})};h.prototype.connect=function(){a.connect=true;if(this.nativeBridge!=null){logger.debug("[Chrome-Extension-HC]: The hostApp is already connected");if(e){g.postMessage({type:"host_messages",data:{target:"ui",type:"event",name:"onPluginFail",params:{error:d,message:i}}})}a.connect=false;return true}else{this.webSocket=null;this.nativeBridge=null}logger.debug("[Chrome-Extension-HC]: Connecting to hostApp");this.nativeBridge=chrome.runtime.connectNative(this.hostAppName);if(!this.nativeBridge){logger.error("[Chrome-Extension-HC]: Connection failed: ",(chrome.runtime.lastError?chrome.runtime.lastError.message:"Unknown reason"));a.connect=false;return false}else{this.connectWebSocket();logger.debug("[Chrome-Extension-HC]: Connection succeeded");this.nativeBridge.onMessage.addListener(this.receiveMessage);var k=this;this.nativeBridge.onDisconnect.addListener(function(m){logger.debug("[Chrome-Extension-HC]: Disconnected from hostApp side: {}",(chrome.runtime.lastError?chrome.runtime.lastError:"Unknown reason"));k.disconnectWebSocket();k.nativeBridge.disconnect();k.nativeBridge=null;k.webSocket=null;var l={type:"host_messages",data:{target:"ui",type:"event",name:"disconnectHostApp",isHostAppDisconnected:true}};if(e){logger.debug("[Chrome-Extension-HC]: Responding with disconnect status: ",l);g.postMessage(l)}});b=(this.isHostAppConnected())?0:6000;setTimeout(function(){c=this.nativeBridge;if(e){g.postMessage({type:"host_messages",data:{target:"ui",type:"event",name:"connectHostApp",isHostAppConnected:true}})}a.connect=false},b);return true}};h.prototype.disconnect=function(){a.disconnect=true;if(this.nativeBridge){logger.debug("[Chrome-Extension-HC]: Disconnecting from hostApp");this.disconnectWebSocket();this.nativeBridge.disconnect();this.nativeBridge=null;this.webSocket=null;var k={type:"host_messages",data:{target:"ui",type:"event",name:"disconnectHostApp",isHostAppDisconnected:true}};if(e){logger.debug("[Chrome-Extension-HC]: Responding with disconnect status: ",k);g.postMessage(k)}}else{logger.debug("[Chrome-Extension-HC]: The hostApp is already disconnected")}setTimeout(function(){a={checkHostApp:false,connect:false,disconnect:false}},f);return true};h.prototype.getRpwsPagePortConnected=function(){return e};h.prototype.setRpwsPagePortConnected=function(k){e=k;logger.setRpwsPagePortConnected(k)};h.prototype.setPort=function(k){logger.debug("[Chrome-Extension-HC]: setPort");g=k;e=true;logger.setRpwsPagePort(k);logger.setRpwsPagePortConnected(true)};h.prototype.sendMessage=function(k){logger.trace("[Chrome-Extension-HC]: sendMessage: ",k);if(this.nativeBridge){this.nativeBridge.postMessage(k)}};h.prototype.receiveMessage=function(k){logger.trace("[Chrome-Extension-HC]: receiveMessage:  ",k);if(!k){return}if(k.target==="extension"){logger.debug("Got extension target");if(k.name==="getProxySettings"){var l={target:"avcClient",type:"command",name:"setProxySettings",params:{}};getProxySettings(function(m){if(m){l.params=m}c.postMessage(l)})}}else{if(k.target==="ui"){if(e){g.postMessage({type:"host_messages",data:k})}}}};h.prototype.isHostAppConnected=function(){return(this.webSocket&&this.webSocket.readyState==1)};h.prototype.isHostAppDisconnected=function(){return(!this.webSocket&&!this.nativeBridge)};h.prototype.connectWebSocket=function(){if(this.webSocket!=null&&this.webSocket.readyState==1){logger.debug("[Chrome-Extension-HC]: The web socket is already connected");return}logger.debug("[Chrome-Extension-HC]: Connecting to web socket server of hostApp at: "+this.wsUrl);var k=new ReconnectingWebSocket(this.wsUrl);k.reconnectInterval=2000;k.onopen=function(l){logger.debug("[Chrome-Extension-HC]: Websocket connected");k.onclose=function(m){logger.debug("[Chrome-Extension-HC]: Received Websocket close from hostApp")};k.onerror=function(m){logger.debug("[Chrome-Extension-HC]: Received Websocket error from hostApp")};k.onmessage=function(m){if(!m){logger.debug("[Chrome-Extension-HC]: Received Null data from hostApp");return}else{if(typeof m.data==="string"){try{var o=JSON.parse(m.data);if(e){g.postMessage({type:"media_streams",data:o})}}catch(n){logger.debug("[Chrome-Extension-HC]: Error in parsing the JSON data.")}}}delete m}};k.onconnecting=function(l){logger.debug("[Chrome-Extension-HC]: Received Websocket connecting from browser");if(l&&l.code===1006){logger.debug("[Chrome-Extension-HC]: Received Websocket close from browser while connecting. CloseEvent: ",l.code,l.reason);g.postMessage({type:"host_messages",data:{target:"ui",type:"event",name:"onStreamingWSClose",params:{error:"WEB_SOCKET_CLOSED",message:"Web socket closed abnormally by browser"}}})}};k.onclose=function(l){logger.debug("[Chrome-Extension-HC]: Received Websocket close from browser. CloseEvent: ",l.code,l.reason)};k.onerror=function(l){logger.debug("[Chrome-Extension-HC]: Received Websocket error from browser. CloseEvent: ",l.code,l.reason)};this.webSocket=k;return k};h.prototype.disconnectWebSocket=function(){logger.debug("[Chrome-Extension-HC]: Asking to disconnect");if(this.webSocket){this.webSocket.close();this.webSocket=null}};h.prototype.sendMessageWebSocket=function(k){if(this.webSocket&&this.webSocket.readyState==1){logger.trace("[Chrome-Extension-HC]: Sending data to hostApp: ",k);this.webSocket.send(JSON.stringify(k))}else{logger.debug("webSocket is not in readyState")}};com.polycom.rpws.HostAppController=h})();