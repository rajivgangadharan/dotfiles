;;; exwm-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from exwm.el

(autoload 'exwm-restart "exwm" "\
Restart EXWM." t)
(autoload 'exwm-init "exwm" "\
Initialize EXWM.
FRAME, if given, indicates the X display EXWM should manage.

(fn &optional FRAME)" t)
(autoload 'exwm-exit "exwm" "\
Exit EXWM." t)
(autoload 'exwm-enable "exwm" "\
Enable/Disable EXWM.
Optional argument UNDO may be either of the following symbols:
- `undo' prevents reinitialization.
- `undo-all' attempts to revert all hooks and advice.

(fn &optional UNDO)")
(register-definition-prefixes "exwm" '("exwm-"))


;;; Generated autoloads from exwm-background.el

(defvar exwm-background-mode nil "\
Non-nil if Exwm-Background mode is enabled.
See the `exwm-background-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `exwm-background-mode'.")
(custom-autoload 'exwm-background-mode "exwm-background" nil)
(autoload 'exwm-background-mode "exwm-background" "\
Toggle EXWM background support.

This is a global minor mode.  If called interactively, toggle the
`Exwm-Background mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='exwm-background-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "exwm-background" '("exwm-background-"))


;;; Generated autoloads from exwm-core.el

(register-definition-prefixes "exwm-core" '("exwm-"))


;;; Generated autoloads from exwm-floating.el

(autoload 'exwm-floating-toggle-floating "exwm-floating" "\
Toggle the current window between floating and non-floating states." t)
(autoload 'exwm-floating-hide "exwm-floating" "\
Hide the current floating X window (which would show again when selected)." t)
(register-definition-prefixes "exwm-floating" '("exwm-floating-"))


;;; Generated autoloads from exwm-input.el

(autoload 'exwm-input-set-key "exwm-input" "\
Set a global KEY binding to COMMAND.

The new binding only takes effect in real time when this command is
called interactively, and is lost when this session ends unless it's
specifically saved in the Customize interface for `exwm-input-global-keys'.

In configuration you should customize or set `exwm-input-global-keys'
instead.

(fn KEY COMMAND)" t)
(autoload 'exwm-input-grab-keyboard "exwm-input" "\
Switch to `line-mode`.
When ID is non-nil, grab key events on its corresponding window.

(fn &optional ID)" t)
(autoload 'exwm-input-release-keyboard "exwm-input" "\
Switch to `char-mode`.
When ID is non-nil, release keyboard events on its corresponding window.

(fn &optional ID)" t)
(autoload 'exwm-input-toggle-keyboard "exwm-input" "\
Toggle between `line-mode' and `char-mode'.
When ID is non-nil, toggle in its correpsonding window.

(fn &optional ID)" t)
(autoload 'exwm-input-send-next-key "exwm-input" "\
Send next N keys to client window.
N is currently capped at 12.
EXWM will prompt for the key to send.
If END-KEY is non-nil, stop sending keys if it's pressed.

(fn N &optional END-KEY)" t)
(autoload 'exwm-input-set-simulation-key "exwm-input" "\
Set ORIGINAL-KEY to  SIMULATED-KEY.

The simulation key takes effect in real time, but is lost when this session
ends unless it's specifically saved in the Customize interface for
`exwm-input-simulation-keys'.

(fn ORIGINAL-KEY SIMULATED-KEY)" t)
(autoload 'exwm-input-send-simulation-key "exwm-input" "\
Fake N key events according to the last input key sequence.

(fn N)" t)
(autoload 'exwm-input-invoke-factory "exwm-input" "\
Make a command that invokes KEYS when called.

One use is to access the keymap bound to KEYS (as prefix keys) in `char-mode'.

(fn KEYS)" nil t)
(register-definition-prefixes "exwm-input" '("exwm-input-"))


;;; Generated autoloads from exwm-layout.el

(autoload 'exwm-layout-set-fullscreen "exwm-layout" "\
Make window ID fullscreen.

(fn &optional ID)" t)
(autoload 'exwm-layout-unset-fullscreen "exwm-layout" "\
Restore X window ID from fullscreen state.

(fn &optional ID)" t)
(autoload 'exwm-layout-toggle-fullscreen "exwm-layout" "\
Toggle fullscreen mode of X window ID.
If ID is non-nil, default to ID of `window-buffer'.

(fn &optional ID)" t)
(autoload 'exwm-layout-enlarge-window "exwm-layout" "\
Make the selected window DELTA pixels taller.

If no argument is given, make the selected window one pixel taller.  If the
optional argument HORIZONTAL is non-nil, make selected window DELTA pixels
wider.  If DELTA is negative, shrink selected window by -DELTA pixels.

Normal hints are checked and regarded if the selected window is displaying an
`exwm-mode' buffer.  However, this may violate the normal hints set on other X
windows.

(fn DELTA &optional HORIZONTAL)" t)
(autoload 'exwm-layout-enlarge-window-horizontally "exwm-layout" "\
Make the selected window DELTA pixels wider.

See also `exwm-layout-enlarge-window'.

(fn DELTA)" t)
(autoload 'exwm-layout-shrink-window "exwm-layout" "\
Make the selected window DELTA pixels lower.

See also `exwm-layout-enlarge-window'.

(fn DELTA)" t)
(autoload 'exwm-layout-shrink-window-horizontally "exwm-layout" "\
Make the selected window DELTA pixels narrower.

See also `exwm-layout-enlarge-window'.

(fn DELTA)" t)
(autoload 'exwm-layout-hide-mode-line "exwm-layout" "\
Hide mode-line." t)
(autoload 'exwm-layout-show-mode-line "exwm-layout" "\
Show mode-line." t)
(autoload 'exwm-layout-toggle-mode-line "exwm-layout" "\
Toggle the display of mode-line." t)
(register-definition-prefixes "exwm-layout" '("exwm-layout-"))


;;; Generated autoloads from exwm-manage.el

(register-definition-prefixes "exwm-manage" '("exwm-manage-"))


;;; Generated autoloads from exwm-randr.el

(defvar exwm-randr-mode nil "\
Non-nil if Exwm-Randr mode is enabled.
See the `exwm-randr-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `exwm-randr-mode'.")
(custom-autoload 'exwm-randr-mode "exwm-randr" nil)
(autoload 'exwm-randr-mode "exwm-randr" "\
Toggle EXWM randr support.

This is a global minor mode.  If called interactively, toggle the
`Exwm-Randr mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='exwm-randr-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'exwm-randr-refresh "exwm-randr" "\
Refresh workspaces according to the updated RandR info." t)
(register-definition-prefixes "exwm-randr" '("exwm-randr-"))


;;; Generated autoloads from exwm-systemtray.el

(defvar exwm-systemtray-mode nil "\
Non-nil if Exwm-Systemtray mode is enabled.
See the `exwm-systemtray-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `exwm-systemtray-mode'.")
(custom-autoload 'exwm-systemtray-mode "exwm-systemtray" nil)
(autoload 'exwm-systemtray-mode "exwm-systemtray" "\
Toggle EXWM systemtray support.

This is a global minor mode.  If called interactively, toggle the
`Exwm-Systemtray mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='exwm-systemtray-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "exwm-systemtray" '("exwm-systemtray-"))


;;; Generated autoloads from exwm-workspace.el

(autoload 'exwm-workspace--get-geometry "exwm-workspace" "\
Return the geometry of frame FRAME.

(fn FRAME)")
(autoload 'exwm-workspace--current-height "exwm-workspace" "\
Return the height of current workspace.")
(autoload 'exwm-workspace--minibuffer-own-frame-p "exwm-workspace" "\
Reports whether the minibuffer is displayed in its own frame.")
(autoload 'exwm-workspace-switch "exwm-workspace" "\
Switch to workspace FRAME-OR-INDEX (0-based).

Query for the index if not specified when called interactively.  Passing a
workspace frame as the first option or making use of the rest options are
for internal use only.

When FORCE is true, allow switching to current workspace.

(fn FRAME-OR-INDEX &optional FORCE)" t)
(autoload 'exwm-workspace-switch-create "exwm-workspace" "\
Switch to workspace FRAME-OR-INDEX creating it first non-existent.

Passing a workspace frame as the first option is for internal use only.

(fn FRAME-OR-INDEX)" t)
(autoload 'exwm-workspace-swap "exwm-workspace" "\
Interchange position of WORKSPACE1 with that of WORKSPACE2.

(fn WORKSPACE1 WORKSPACE2)" t)
(autoload 'exwm-workspace-move "exwm-workspace" "\
Move WORKSPACE to the NTH position.

When called interactively, prompt for a workspace and move current one just
before it.

(fn WORKSPACE NTH)" t)
(autoload 'exwm-workspace-add "exwm-workspace" "\
Add a workspace as the INDEX-th workspace, or the last one if INDEX is nil.

INDEX must not exceed the current number of workspaces.

(fn &optional INDEX)" t)
(autoload 'exwm-workspace-delete "exwm-workspace" "\
Delete the workspace FRAME-OR-INDEX.

(fn &optional FRAME-OR-INDEX)" t)
(autoload 'exwm-workspace-move-window "exwm-workspace" "\
Move window ID to workspace FRAME-OR-INDEX.

(fn FRAME-OR-INDEX &optional ID)" t)
(autoload 'exwm-workspace-switch-to-buffer "exwm-workspace" "\
Make selected window display BUFFER-OR-NAME.

(fn BUFFER-OR-NAME)" t)
(autoload 'exwm-workspace-attach-minibuffer "exwm-workspace" "\
Attach the minibuffer making it always visible." t)
(autoload 'exwm-workspace-detach-minibuffer "exwm-workspace" "\
Detach the minibuffer so that it automatically hides." t)
(autoload 'exwm-workspace-toggle-minibuffer "exwm-workspace" "\
Attach the minibuffer if it's detached, or detach it if it's attached." t)
(register-definition-prefixes "exwm-workspace" '("exwm-workspace-"))


;;; Generated autoloads from exwm-xim.el

(defvar exwm-xim-mode nil "\
Non-nil if Exwm-Xim mode is enabled.
See the `exwm-xim-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `exwm-xim-mode'.")
(custom-autoload 'exwm-xim-mode "exwm-xim" nil)
(autoload 'exwm-xim-mode "exwm-xim" "\
Toggle EXWM XIM support.

This is a global minor mode.  If called interactively, toggle the
`Exwm-Xim mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='exwm-xim-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "exwm-xim" '("exwm-xim-"))


;;; Generated autoloads from exwm-xsettings.el

(defvar exwm-xsettings-mode nil "\
Non-nil if Exwm-Xsettings mode is enabled.
See the `exwm-xsettings-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `exwm-xsettings-mode'.")
(custom-autoload 'exwm-xsettings-mode "exwm-xsettings" nil)
(autoload 'exwm-xsettings-mode "exwm-xsettings" "\
Toggle EXWM xsettings support.

This is a global minor mode.  If called interactively, toggle the
`Exwm-Xsettings mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='exwm-xsettings-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "exwm-xsettings" '("exwm-xsettings"))

;;; End of scraped data

(provide 'exwm-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; exwm-autoloads.el ends here
